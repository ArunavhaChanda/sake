#all : sake.native hello printbig.o

#sake.native :
	#ocamlbuild -use-ocamlfind -pkgs llvm,llvm.analysis -cflags -w,+a-4 sake.native

OBJS = ast.cmx llvm_generator.cmx parser.cmx scanner.cmx sake.cmx

sake : $(OBJS)
	ocamlfind ocamlopt -linkpkg -package llvm -package llvm.analysis $(OBJS) -o sake

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc -v parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<

%.cmx : %.ml
	ocamlfind ocamlopt -c -package llvm $<

printbig : printbig.c
	cc -o printbig -DBUILD_TEST printbig.c


#./sake hello.sk -> hello.ll
#llc hello.ll -> hello.s

.PHONY : hello
hello:
	./sake hello.sk
	lli hello.ll

.PHONY : clean
clean :
	ocamlbuild -clean
	rm -rf *.cmx *.cmo *.s *.ll *.out *.exe *.o
	rm -rf sake parser.ml parser.mli scanner.ml *.cmo *.cmi *.output

# Generated by ocamldep *.ml *.mli
ast.cmo :
ast.cmx :
llvm_generator.cmo : ast.cmo
llvm_generator.cmx : ast.cmx
sake.cmo: scanner.cmo parser.cmi llvm_generator.cmo ast.cmo
sake.cmx: scanner.cmx parser.cmx llvm_generator.cmx ast.cmx
parser.cmo: ast.cmo parser.cmi
parser.cmx: ast.cmx parser.cmi
scanner.cmo: parser.cmi
scanner.cmx: parser.cmx
parser.cmi: ast.cmo
